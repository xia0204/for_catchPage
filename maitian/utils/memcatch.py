#data = ['8', '1,640', '24,332', '424', '1,700', '936', '936', '5,944', '10,312', '512', '28,048', '2,492', '572', '1,168', '12,372', '4,316', '3,448', '4,468', '4,804', '9,332', '1,032', '16,072', '5,260', '12,456', '5,504', '6,484', '2,048', '4,056', '1,492', '4,968', '4,184', '2,084', '8,952', '370,244', '740', '4,836', '2,716', '6,108', '2,792', '1,040', '1,020', '5,060', '7,064', '1,104', '11,880', '2,548', '6,620', '1,220', '6,916', '10,024', '2,676', '4,776', '3,508', '976', '1,140', '6,480', '896', '9,396', '1,612', '2,928', '1,308', '17,768', '25,688', '3,572', '8,788', '3,872', '9,284', '46,916', '1,460', '13,288', '1,472', '1,212', '2,596', '4,376', '1,152', '2,080', '1,348', '956', '9,688', '8,184', '13,552', '1,828', '976', '6,340', '7,388', '1,856', '4,360', '532', '1,260', '4,144', '1,244', '6,456', '3,396', '2,424', '19,684', '1,032', '1,236', '872', '1,620', '2,920', '4,848', '3,748', '3,824', '2,888', '2,232', '2,192', '4,760', '41,088', '16,904', '3,040', '8,900', '5,484', '4,792', '6,772', '8,516', '21,564', '2,732', '448', '1,332', '3,416', '2,828', '15,060', '1,240', '7,804', '1,104', '2,524', '194,148', '18,516', '8,616', '1,628', '2,504', '10,988', '21,356', '13,772', '1,924', '2,688', '41,932', '19,036', '1,032', '60,052', '10,528', '3,632', '3,952', '1,008', '736', '2,700', '2,348', '1,916', '4,024', '3,608', '5,384', '3,080', '1,460', '8,796', '45,812', '3,964', '600', '988', '1,820', '14,252', '11,672', '11,704', '10,584', '5,872', '103,388', '4,228', '43,676', '22,192', '10,880', '15,244', '13,076', '3,844', '60', '1,676', '6,112', '14,380', '2,044', '3,940', '2,136', '2,160', '4,200', '11,364', '1,912', '2,632', '1,464', '50,292', '1,224', '29,056', '3,220', '7,384', '6,220', '12,080', '9,336', '1,084', '16,448', '2,996', '60', '64', '1,900', '1,548', '124', '128', '24', '1,844', '117,332', '79,632', '181,880', '10,464', '70,092', '111,156', '20,592', '52,116', '9,416', '37,444', '19,452', '72,928', '3,284', '42,588', '14,740', '144,404', '8,272', '8,944', '122,936', '30,372', '88,396', '85,056', '39,512', '18,468', '21,700', '2,796']
import os

class CheckMem():
    def __init__(self):
        self.dd = []
        with os.popen("tasklist") as popen:
            self.string_cmd_data = popen.read()
            popen.close()
        self.list_mem_data_dou = [i.split(" ")[-2] for i in self.string_cmd_data.split("\n")[3:-2]]#将切分成行的数据按照空格切分 取出内存的字符串

    def link_to_num(self,li):#将按照逗号分割开的数字字符串拼接起来
        st = ""
        for i in li:
            st += i
        return st

    def list_mem_data_dou_to_num(self):

        for i in self.list_mem_data_dou:
            idata = i.split(",")
            num = self.link_to_num(idata)
            self.dd.append(num)

        while "" in set(self.dd):
            self.dd.sort(reverse=True)
            self.dd.pop()
        print(sum([int(i) for i in self.dd])/160000)


if __name__ == "__main__":
    mem = CheckMem()
    mem.list_mem_data_dou_to_num()








